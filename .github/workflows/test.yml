# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Test

on:
  push:
    branches: [master, dev]
  pull_request:
    branches: [master, dev]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest] # add windows-2019 when poetry allows installation with `-f` flag
        python-version: [3.8, 3.9]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Install poetry
        shell: bash
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
      - name: Set poetry path variable
        run: echo "/Users/runner/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        shell: bash
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

      - name: Upgrade pip
        shell: bash
        run: poetry run python -m pip install pip -U

      - name: Install dependencies
        shell: bash
        run: poetry install --no-interaction --no-root

      - name: Run unittest
        shell: bash
        run: poetry run coverage run -m unittest discover -s ./tests  -p 'test_*.py'

      - name: Statistics
        if: success()
        run: |
          poetry run coverage report -i
          poetry run coverage xml -i

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        continue-on-error: true
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.xml
          flags: cpu, unittest
          name: CPU-coverage
          fail_ci_if_error: false

  docs:
    name: Test docs build
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('docs/requirements_docs.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y pandoc
          python -m pip install --upgrade pip
          pip install -r docs/requirements_docs.txt
        shell: bash

      - name: Build sphinx documentation
        run: |
          cd docs
          make clean
          make html --debug --jobs 2 SPHINXOPTS="-W"

      - name: Upload built docs
        uses: actions/upload-artifact@v2
        with:
          name: docs-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}
          path: docs/build/html/
        # Use always() to always run this step to publish test results when there are test failures
        if: success()
